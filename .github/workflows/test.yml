name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  RUST_LOG: info
  MODEL: zai-org/GLM-4.5-Air

jobs:
  build:
    name: Build Proxy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build proxy
      run: cargo build --release
    
    - name: Upload proxy binary
      uses: actions/upload-artifact@v3
      with:
        name: claude_openai_proxy
        path: target/release/claude_openai_proxy

  test-core:
    name: Core Tests
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        test: [basic, conversation, parallel]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download proxy binary
      uses: actions/download-artifact@v3
      with:
        name: claude_openai_proxy
        path: target/release/
    
    - name: Make scripts executable
      run: |
        chmod +x target/release/claude_openai_proxy
        chmod +x test.sh tests/*.sh
    
    - name: Start proxy
      run: |
        RUST_LOG=warn target/release/claude_openai_proxy &
        echo $! > proxy.pid
        sleep 3
      env:
        BACKEND_URL: ${{ secrets.BACKEND_URL || 'http://localhost:8000/v1/chat/completions' }}
        BACKEND_KEY: ${{ secrets.BACKEND_KEY }}
    
    - name: Wait for proxy
      run: |
        for i in {1..30}; do
          curl -s http://localhost:8080/v1/messages \
            -H 'content-type: application/json' \
            -d '{"model":"test","messages":[{"role":"user","content":"hi"}],"max_tokens":10}' \
            > /dev/null 2>&1 && echo "Proxy ready" && exit 0
          echo "Waiting... ($i/30)"
          sleep 1
        done
        echo "Proxy failed to start" && exit 1
    
    - name: Run ${{ matrix.test }} test
      run: ./test.sh --ci --${{ matrix.test }}
      env:
        CHUTES_TEST_API_KEY: ${{ secrets.CHUTES_TEST_API_KEY }}
        MODEL: ${{ env.MODEL }}
        PROXY_URL: http://localhost:8080
    
    - name: Stop proxy
      if: always()
      run: kill $(cat proxy.pid) 2>/dev/null || true

  test-features:
    name: Feature Tests
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        test: 
          - test_claude_code_patterns.sh
          - test_multimodal.sh
          - test_tool_results.sh
          - test_token_count.sh
          - test_model_404.sh
          - test_model_case_correction.sh
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download proxy binary
      uses: actions/download-artifact@v3
      with:
        name: claude_openai_proxy
        path: target/release/
    
    - name: Make scripts executable
      run: |
        chmod +x target/release/claude_openai_proxy
        chmod +x tests/*.sh
    
    - name: Start proxy
      run: |
        RUST_LOG=warn target/release/claude_openai_proxy &
        echo $! > proxy.pid
        sleep 3
      env:
        BACKEND_URL: ${{ secrets.BACKEND_URL || 'http://localhost:8000/v1/chat/completions' }}
        BACKEND_KEY: ${{ secrets.BACKEND_KEY }}
    
    - name: Run ${{ matrix.test }}
      run: ./tests/${{ matrix.test }}
      env:
        CHUTES_TEST_API_KEY: ${{ secrets.CHUTES_TEST_API_KEY }}
        MODEL: ${{ env.MODEL }}
        PROXY_URL: http://localhost:8080
    
    - name: Stop proxy
      if: always()
      run: kill $(cat proxy.pid) 2>/dev/null || true

  validate:
    name: Validate Test Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Make scripts executable
      run: chmod +x validate_tests.sh tests/*.sh
    
    - name: Validate Claude API spec compliance
      run: ./validate_tests.sh
  
  validate-api:
    name: Validate Claude API Format
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download proxy binary
      uses: actions/download-artifact@v3
      with:
        name: claude_openai_proxy
        path: target/release/
    
    - name: Make scripts executable
      run: |
        chmod +x target/release/claude_openai_proxy
        chmod +x tests/*.sh
    
    - name: Start proxy
      run: |
        RUST_LOG=error target/release/claude_openai_proxy &
        echo $! > proxy.pid
        sleep 3
      env:
        BACKEND_URL: ${{ secrets.BACKEND_URL || 'http://localhost:8000/v1/chat/completions' }}
        BACKEND_KEY: ${{ secrets.BACKEND_KEY }}
    
    - name: Validate Claude Messages API compliance
      run: ./tests/validate_claude_api.sh http://localhost:8080 || true
      env:
        CHUTES_TEST_API_KEY: ${{ secrets.CHUTES_TEST_API_KEY }}
        MODEL: ${{ env.MODEL }}
      continue-on-error: true
    
    - name: Check proxy format
      run: |
        RESPONSE=$(curl -s -N http://localhost:8080/v1/messages \
          -H 'content-type: application/json' \
          -H 'Authorization: Bearer test' \
          -d '{"model":"test","messages":[{"role":"user","content":"hi"}],"max_tokens":10,"stream":true}' \
          | head -20)
        
        echo "Checking proxy format..."
        echo "$RESPONSE" | grep -q "message_start" && echo "Pass: message_start" || exit 1
        echo "$RESPONSE" | grep -q '"type":' && echo "Pass: JSON structure" || exit 1
        ! echo "$RESPONSE" | grep -q '"choices"' && echo "Pass: No OpenAI leakage" || exit 1
        echo "Proxy format validation PASSED"
    
    - name: Stop proxy
      if: always()
      run: kill $(cat proxy.pid) 2>/dev/null || true

